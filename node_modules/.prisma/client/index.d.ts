
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model banner
 * 
 */
export type banner = $Result.DefaultSelection<Prisma.$bannerPayload>
/**
 * Model gallery
 * 
 */
export type gallery = $Result.DefaultSelection<Prisma.$galleryPayload>
/**
 * Model highlight
 * 
 */
export type highlight = $Result.DefaultSelection<Prisma.$highlightPayload>
/**
 * Model showcase
 * 
 */
export type showcase = $Result.DefaultSelection<Prisma.$showcasePayload>
/**
 * Model avatar
 * 
 */
export type avatar = $Result.DefaultSelection<Prisma.$avatarPayload>
/**
 * Model fading_img
 * 
 */
export type fading_img = $Result.DefaultSelection<Prisma.$fading_imgPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Banners
 * const banners = await prisma.banner.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Banners
   * const banners = await prisma.banner.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.banner`: Exposes CRUD operations for the **banner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banners
    * const banners = await prisma.banner.findMany()
    * ```
    */
  get banner(): Prisma.bannerDelegate<ExtArgs>;

  /**
   * `prisma.gallery`: Exposes CRUD operations for the **gallery** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Galleries
    * const galleries = await prisma.gallery.findMany()
    * ```
    */
  get gallery(): Prisma.galleryDelegate<ExtArgs>;

  /**
   * `prisma.highlight`: Exposes CRUD operations for the **highlight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Highlights
    * const highlights = await prisma.highlight.findMany()
    * ```
    */
  get highlight(): Prisma.highlightDelegate<ExtArgs>;

  /**
   * `prisma.showcase`: Exposes CRUD operations for the **showcase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Showcases
    * const showcases = await prisma.showcase.findMany()
    * ```
    */
  get showcase(): Prisma.showcaseDelegate<ExtArgs>;

  /**
   * `prisma.avatar`: Exposes CRUD operations for the **avatar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avatars
    * const avatars = await prisma.avatar.findMany()
    * ```
    */
  get avatar(): Prisma.avatarDelegate<ExtArgs>;

  /**
   * `prisma.fading_img`: Exposes CRUD operations for the **fading_img** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fading_imgs
    * const fading_imgs = await prisma.fading_img.findMany()
    * ```
    */
  get fading_img(): Prisma.fading_imgDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    banner: 'banner',
    gallery: 'gallery',
    highlight: 'highlight',
    showcase: 'showcase',
    avatar: 'avatar',
    fading_img: 'fading_img'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'banner' | 'gallery' | 'highlight' | 'showcase' | 'avatar' | 'fading_img'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      banner: {
        payload: Prisma.$bannerPayload<ExtArgs>
        fields: Prisma.bannerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bannerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bannerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          findFirst: {
            args: Prisma.bannerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bannerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          findMany: {
            args: Prisma.bannerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>[]
          }
          create: {
            args: Prisma.bannerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          createMany: {
            args: Prisma.bannerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.bannerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          update: {
            args: Prisma.bannerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          deleteMany: {
            args: Prisma.bannerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.bannerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.bannerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          aggregate: {
            args: Prisma.BannerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBanner>
          }
          groupBy: {
            args: Prisma.bannerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BannerGroupByOutputType>[]
          }
          count: {
            args: Prisma.bannerCountArgs<ExtArgs>,
            result: $Utils.Optional<BannerCountAggregateOutputType> | number
          }
        }
      }
      gallery: {
        payload: Prisma.$galleryPayload<ExtArgs>
        fields: Prisma.galleryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.galleryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.galleryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload>
          }
          findFirst: {
            args: Prisma.galleryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.galleryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload>
          }
          findMany: {
            args: Prisma.galleryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload>[]
          }
          create: {
            args: Prisma.galleryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload>
          }
          createMany: {
            args: Prisma.galleryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.galleryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload>
          }
          update: {
            args: Prisma.galleryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload>
          }
          deleteMany: {
            args: Prisma.galleryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.galleryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.galleryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$galleryPayload>
          }
          aggregate: {
            args: Prisma.GalleryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGallery>
          }
          groupBy: {
            args: Prisma.galleryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GalleryGroupByOutputType>[]
          }
          count: {
            args: Prisma.galleryCountArgs<ExtArgs>,
            result: $Utils.Optional<GalleryCountAggregateOutputType> | number
          }
        }
      }
      highlight: {
        payload: Prisma.$highlightPayload<ExtArgs>
        fields: Prisma.highlightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.highlightFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.highlightFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload>
          }
          findFirst: {
            args: Prisma.highlightFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.highlightFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload>
          }
          findMany: {
            args: Prisma.highlightFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload>[]
          }
          create: {
            args: Prisma.highlightCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload>
          }
          createMany: {
            args: Prisma.highlightCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.highlightDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload>
          }
          update: {
            args: Prisma.highlightUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload>
          }
          deleteMany: {
            args: Prisma.highlightDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.highlightUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.highlightUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$highlightPayload>
          }
          aggregate: {
            args: Prisma.HighlightAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHighlight>
          }
          groupBy: {
            args: Prisma.highlightGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HighlightGroupByOutputType>[]
          }
          count: {
            args: Prisma.highlightCountArgs<ExtArgs>,
            result: $Utils.Optional<HighlightCountAggregateOutputType> | number
          }
        }
      }
      showcase: {
        payload: Prisma.$showcasePayload<ExtArgs>
        fields: Prisma.showcaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.showcaseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.showcaseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload>
          }
          findFirst: {
            args: Prisma.showcaseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.showcaseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload>
          }
          findMany: {
            args: Prisma.showcaseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload>[]
          }
          create: {
            args: Prisma.showcaseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload>
          }
          createMany: {
            args: Prisma.showcaseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.showcaseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload>
          }
          update: {
            args: Prisma.showcaseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload>
          }
          deleteMany: {
            args: Prisma.showcaseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.showcaseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.showcaseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$showcasePayload>
          }
          aggregate: {
            args: Prisma.ShowcaseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShowcase>
          }
          groupBy: {
            args: Prisma.showcaseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ShowcaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.showcaseCountArgs<ExtArgs>,
            result: $Utils.Optional<ShowcaseCountAggregateOutputType> | number
          }
        }
      }
      avatar: {
        payload: Prisma.$avatarPayload<ExtArgs>
        fields: Prisma.avatarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.avatarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.avatarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload>
          }
          findFirst: {
            args: Prisma.avatarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.avatarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload>
          }
          findMany: {
            args: Prisma.avatarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload>[]
          }
          create: {
            args: Prisma.avatarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload>
          }
          createMany: {
            args: Prisma.avatarCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.avatarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload>
          }
          update: {
            args: Prisma.avatarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload>
          }
          deleteMany: {
            args: Prisma.avatarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.avatarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.avatarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$avatarPayload>
          }
          aggregate: {
            args: Prisma.AvatarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAvatar>
          }
          groupBy: {
            args: Prisma.avatarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AvatarGroupByOutputType>[]
          }
          count: {
            args: Prisma.avatarCountArgs<ExtArgs>,
            result: $Utils.Optional<AvatarCountAggregateOutputType> | number
          }
        }
      }
      fading_img: {
        payload: Prisma.$fading_imgPayload<ExtArgs>
        fields: Prisma.fading_imgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.fading_imgFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.fading_imgFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload>
          }
          findFirst: {
            args: Prisma.fading_imgFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.fading_imgFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload>
          }
          findMany: {
            args: Prisma.fading_imgFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload>[]
          }
          create: {
            args: Prisma.fading_imgCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload>
          }
          createMany: {
            args: Prisma.fading_imgCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.fading_imgDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload>
          }
          update: {
            args: Prisma.fading_imgUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload>
          }
          deleteMany: {
            args: Prisma.fading_imgDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.fading_imgUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.fading_imgUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fading_imgPayload>
          }
          aggregate: {
            args: Prisma.Fading_imgAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFading_img>
          }
          groupBy: {
            args: Prisma.fading_imgGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Fading_imgGroupByOutputType>[]
          }
          count: {
            args: Prisma.fading_imgCountArgs<ExtArgs>,
            result: $Utils.Optional<Fading_imgCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model banner
   */

  export type AggregateBanner = {
    _count: BannerCountAggregateOutputType | null
    _avg: BannerAvgAggregateOutputType | null
    _sum: BannerSumAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  export type BannerAvgAggregateOutputType = {
    banner_id: number | null
  }

  export type BannerSumAggregateOutputType = {
    banner_id: number | null
  }

  export type BannerMinAggregateOutputType = {
    banner_id: number | null
    LINK: string | null
  }

  export type BannerMaxAggregateOutputType = {
    banner_id: number | null
    LINK: string | null
  }

  export type BannerCountAggregateOutputType = {
    banner_id: number
    LINK: number
    _all: number
  }


  export type BannerAvgAggregateInputType = {
    banner_id?: true
  }

  export type BannerSumAggregateInputType = {
    banner_id?: true
  }

  export type BannerMinAggregateInputType = {
    banner_id?: true
    LINK?: true
  }

  export type BannerMaxAggregateInputType = {
    banner_id?: true
    LINK?: true
  }

  export type BannerCountAggregateInputType = {
    banner_id?: true
    LINK?: true
    _all?: true
  }

  export type BannerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which banner to aggregate.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned banners
    **/
    _count?: true | BannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BannerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BannerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannerMaxAggregateInputType
  }

  export type GetBannerAggregateType<T extends BannerAggregateArgs> = {
        [P in keyof T & keyof AggregateBanner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanner[P]>
      : GetScalarType<T[P], AggregateBanner[P]>
  }




  export type bannerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: bannerWhereInput
    orderBy?: bannerOrderByWithAggregationInput | bannerOrderByWithAggregationInput[]
    by: BannerScalarFieldEnum[] | BannerScalarFieldEnum
    having?: bannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannerCountAggregateInputType | true
    _avg?: BannerAvgAggregateInputType
    _sum?: BannerSumAggregateInputType
    _min?: BannerMinAggregateInputType
    _max?: BannerMaxAggregateInputType
  }

  export type BannerGroupByOutputType = {
    banner_id: number
    LINK: string | null
    _count: BannerCountAggregateOutputType | null
    _avg: BannerAvgAggregateOutputType | null
    _sum: BannerSumAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  type GetBannerGroupByPayload<T extends bannerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannerGroupByOutputType[P]>
            : GetScalarType<T[P], BannerGroupByOutputType[P]>
        }
      >
    >


  export type bannerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    banner_id?: boolean
    LINK?: boolean
  }, ExtArgs["result"]["banner"]>

  export type bannerSelectScalar = {
    banner_id?: boolean
    LINK?: boolean
  }


  export type $bannerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "banner"
    objects: {}
    scalars: $Extensions.GetResult<{
      banner_id: number
      LINK: string | null
    }, ExtArgs["result"]["banner"]>
    composites: {}
  }


  type bannerGetPayload<S extends boolean | null | undefined | bannerDefaultArgs> = $Result.GetResult<Prisma.$bannerPayload, S>

  type bannerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<bannerFindManyArgs, 'select' | 'include'> & {
      select?: BannerCountAggregateInputType | true
    }

  export interface bannerDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['banner'], meta: { name: 'banner' } }
    /**
     * Find zero or one Banner that matches the filter.
     * @param {bannerFindUniqueArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bannerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, bannerFindUniqueArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Banner that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bannerFindUniqueOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bannerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Banner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindFirstArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bannerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindFirstArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Banner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindFirstOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bannerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banners
     * const banners = await prisma.banner.findMany()
     * 
     * // Get first 10 Banners
     * const banners = await prisma.banner.findMany({ take: 10 })
     * 
     * // Only select the `banner_id`
     * const bannerWithBanner_idOnly = await prisma.banner.findMany({ select: { banner_id: true } })
     * 
    **/
    findMany<T extends bannerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Banner.
     * @param {bannerCreateArgs} args - Arguments to create a Banner.
     * @example
     * // Create one Banner
     * const Banner = await prisma.banner.create({
     *   data: {
     *     // ... data to create a Banner
     *   }
     * })
     * 
    **/
    create<T extends bannerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, bannerCreateArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Banners.
     *     @param {bannerCreateManyArgs} args - Arguments to create many Banners.
     *     @example
     *     // Create many Banners
     *     const banner = await prisma.banner.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bannerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Banner.
     * @param {bannerDeleteArgs} args - Arguments to delete one Banner.
     * @example
     * // Delete one Banner
     * const Banner = await prisma.banner.delete({
     *   where: {
     *     // ... filter to delete one Banner
     *   }
     * })
     * 
    **/
    delete<T extends bannerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, bannerDeleteArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Banner.
     * @param {bannerUpdateArgs} args - Arguments to update one Banner.
     * @example
     * // Update one Banner
     * const banner = await prisma.banner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bannerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, bannerUpdateArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Banners.
     * @param {bannerDeleteManyArgs} args - Arguments to filter Banners to delete.
     * @example
     * // Delete a few Banners
     * const { count } = await prisma.banner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bannerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banners
     * const banner = await prisma.banner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bannerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, bannerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Banner.
     * @param {bannerUpsertArgs} args - Arguments to update or create a Banner.
     * @example
     * // Update or create a Banner
     * const banner = await prisma.banner.upsert({
     *   create: {
     *     // ... data to create a Banner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banner we want to update
     *   }
     * })
    **/
    upsert<T extends bannerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, bannerUpsertArgs<ExtArgs>>
    ): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerCountArgs} args - Arguments to filter Banners to count.
     * @example
     * // Count the number of Banners
     * const count = await prisma.banner.count({
     *   where: {
     *     // ... the filter for the Banners we want to count
     *   }
     * })
    **/
    count<T extends bannerCountArgs>(
      args?: Subset<T, bannerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannerAggregateArgs>(args: Subset<T, BannerAggregateArgs>): Prisma.PrismaPromise<GetBannerAggregateType<T>>

    /**
     * Group by Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bannerGroupByArgs['orderBy'] }
        : { orderBy?: bannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the banner model
   */
  readonly fields: bannerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for banner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bannerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the banner model
   */ 
  interface bannerFieldRefs {
    readonly banner_id: FieldRef<"banner", 'Int'>
    readonly LINK: FieldRef<"banner", 'String'>
  }
    

  // Custom InputTypes

  /**
   * banner findUnique
   */
  export type bannerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner findUniqueOrThrow
   */
  export type bannerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner findFirst
   */
  export type bannerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }


  /**
   * banner findFirstOrThrow
   */
  export type bannerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }


  /**
   * banner findMany
   */
  export type bannerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }


  /**
   * banner create
   */
  export type bannerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * The data needed to create a banner.
     */
    data?: XOR<bannerCreateInput, bannerUncheckedCreateInput>
  }


  /**
   * banner createMany
   */
  export type bannerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many banners.
     */
    data: bannerCreateManyInput | bannerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * banner update
   */
  export type bannerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * The data needed to update a banner.
     */
    data: XOR<bannerUpdateInput, bannerUncheckedUpdateInput>
    /**
     * Choose, which banner to update.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner updateMany
   */
  export type bannerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update banners.
     */
    data: XOR<bannerUpdateManyMutationInput, bannerUncheckedUpdateManyInput>
    /**
     * Filter which banners to update
     */
    where?: bannerWhereInput
  }


  /**
   * banner upsert
   */
  export type bannerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * The filter to search for the banner to update in case it exists.
     */
    where: bannerWhereUniqueInput
    /**
     * In case the banner found by the `where` argument doesn't exist, create a new banner with this data.
     */
    create: XOR<bannerCreateInput, bannerUncheckedCreateInput>
    /**
     * In case the banner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bannerUpdateInput, bannerUncheckedUpdateInput>
  }


  /**
   * banner delete
   */
  export type bannerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter which banner to delete.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner deleteMany
   */
  export type bannerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which banners to delete
     */
    where?: bannerWhereInput
  }


  /**
   * banner without action
   */
  export type bannerDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
  }



  /**
   * Model gallery
   */

  export type AggregateGallery = {
    _count: GalleryCountAggregateOutputType | null
    _avg: GalleryAvgAggregateOutputType | null
    _sum: GallerySumAggregateOutputType | null
    _min: GalleryMinAggregateOutputType | null
    _max: GalleryMaxAggregateOutputType | null
  }

  export type GalleryAvgAggregateOutputType = {
    img_id: number | null
  }

  export type GallerySumAggregateOutputType = {
    img_id: number | null
  }

  export type GalleryMinAggregateOutputType = {
    img_id: number | null
    link: string | null
  }

  export type GalleryMaxAggregateOutputType = {
    img_id: number | null
    link: string | null
  }

  export type GalleryCountAggregateOutputType = {
    img_id: number
    link: number
    _all: number
  }


  export type GalleryAvgAggregateInputType = {
    img_id?: true
  }

  export type GallerySumAggregateInputType = {
    img_id?: true
  }

  export type GalleryMinAggregateInputType = {
    img_id?: true
    link?: true
  }

  export type GalleryMaxAggregateInputType = {
    img_id?: true
    link?: true
  }

  export type GalleryCountAggregateInputType = {
    img_id?: true
    link?: true
    _all?: true
  }

  export type GalleryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which gallery to aggregate.
     */
    where?: galleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of galleries to fetch.
     */
    orderBy?: galleryOrderByWithRelationInput | galleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: galleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` galleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` galleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned galleries
    **/
    _count?: true | GalleryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GalleryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GallerySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GalleryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GalleryMaxAggregateInputType
  }

  export type GetGalleryAggregateType<T extends GalleryAggregateArgs> = {
        [P in keyof T & keyof AggregateGallery]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGallery[P]>
      : GetScalarType<T[P], AggregateGallery[P]>
  }




  export type galleryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: galleryWhereInput
    orderBy?: galleryOrderByWithAggregationInput | galleryOrderByWithAggregationInput[]
    by: GalleryScalarFieldEnum[] | GalleryScalarFieldEnum
    having?: galleryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GalleryCountAggregateInputType | true
    _avg?: GalleryAvgAggregateInputType
    _sum?: GallerySumAggregateInputType
    _min?: GalleryMinAggregateInputType
    _max?: GalleryMaxAggregateInputType
  }

  export type GalleryGroupByOutputType = {
    img_id: number
    link: string | null
    _count: GalleryCountAggregateOutputType | null
    _avg: GalleryAvgAggregateOutputType | null
    _sum: GallerySumAggregateOutputType | null
    _min: GalleryMinAggregateOutputType | null
    _max: GalleryMaxAggregateOutputType | null
  }

  type GetGalleryGroupByPayload<T extends galleryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GalleryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GalleryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GalleryGroupByOutputType[P]>
            : GetScalarType<T[P], GalleryGroupByOutputType[P]>
        }
      >
    >


  export type gallerySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    img_id?: boolean
    link?: boolean
  }, ExtArgs["result"]["gallery"]>

  export type gallerySelectScalar = {
    img_id?: boolean
    link?: boolean
  }


  export type $galleryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "gallery"
    objects: {}
    scalars: $Extensions.GetResult<{
      img_id: number
      link: string | null
    }, ExtArgs["result"]["gallery"]>
    composites: {}
  }


  type galleryGetPayload<S extends boolean | null | undefined | galleryDefaultArgs> = $Result.GetResult<Prisma.$galleryPayload, S>

  type galleryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<galleryFindManyArgs, 'select' | 'include'> & {
      select?: GalleryCountAggregateInputType | true
    }

  export interface galleryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['gallery'], meta: { name: 'gallery' } }
    /**
     * Find zero or one Gallery that matches the filter.
     * @param {galleryFindUniqueArgs} args - Arguments to find a Gallery
     * @example
     * // Get one Gallery
     * const gallery = await prisma.gallery.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends galleryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, galleryFindUniqueArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Gallery that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {galleryFindUniqueOrThrowArgs} args - Arguments to find a Gallery
     * @example
     * // Get one Gallery
     * const gallery = await prisma.gallery.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends galleryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, galleryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Gallery that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {galleryFindFirstArgs} args - Arguments to find a Gallery
     * @example
     * // Get one Gallery
     * const gallery = await prisma.gallery.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends galleryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, galleryFindFirstArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Gallery that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {galleryFindFirstOrThrowArgs} args - Arguments to find a Gallery
     * @example
     * // Get one Gallery
     * const gallery = await prisma.gallery.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends galleryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, galleryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Galleries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {galleryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Galleries
     * const galleries = await prisma.gallery.findMany()
     * 
     * // Get first 10 Galleries
     * const galleries = await prisma.gallery.findMany({ take: 10 })
     * 
     * // Only select the `img_id`
     * const galleryWithImg_idOnly = await prisma.gallery.findMany({ select: { img_id: true } })
     * 
    **/
    findMany<T extends galleryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, galleryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Gallery.
     * @param {galleryCreateArgs} args - Arguments to create a Gallery.
     * @example
     * // Create one Gallery
     * const Gallery = await prisma.gallery.create({
     *   data: {
     *     // ... data to create a Gallery
     *   }
     * })
     * 
    **/
    create<T extends galleryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, galleryCreateArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Galleries.
     *     @param {galleryCreateManyArgs} args - Arguments to create many Galleries.
     *     @example
     *     // Create many Galleries
     *     const gallery = await prisma.gallery.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends galleryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, galleryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Gallery.
     * @param {galleryDeleteArgs} args - Arguments to delete one Gallery.
     * @example
     * // Delete one Gallery
     * const Gallery = await prisma.gallery.delete({
     *   where: {
     *     // ... filter to delete one Gallery
     *   }
     * })
     * 
    **/
    delete<T extends galleryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, galleryDeleteArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Gallery.
     * @param {galleryUpdateArgs} args - Arguments to update one Gallery.
     * @example
     * // Update one Gallery
     * const gallery = await prisma.gallery.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends galleryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, galleryUpdateArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Galleries.
     * @param {galleryDeleteManyArgs} args - Arguments to filter Galleries to delete.
     * @example
     * // Delete a few Galleries
     * const { count } = await prisma.gallery.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends galleryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, galleryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Galleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {galleryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Galleries
     * const gallery = await prisma.gallery.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends galleryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, galleryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gallery.
     * @param {galleryUpsertArgs} args - Arguments to update or create a Gallery.
     * @example
     * // Update or create a Gallery
     * const gallery = await prisma.gallery.upsert({
     *   create: {
     *     // ... data to create a Gallery
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gallery we want to update
     *   }
     * })
    **/
    upsert<T extends galleryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, galleryUpsertArgs<ExtArgs>>
    ): Prisma__galleryClient<$Result.GetResult<Prisma.$galleryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Galleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {galleryCountArgs} args - Arguments to filter Galleries to count.
     * @example
     * // Count the number of Galleries
     * const count = await prisma.gallery.count({
     *   where: {
     *     // ... the filter for the Galleries we want to count
     *   }
     * })
    **/
    count<T extends galleryCountArgs>(
      args?: Subset<T, galleryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GalleryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gallery.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GalleryAggregateArgs>(args: Subset<T, GalleryAggregateArgs>): Prisma.PrismaPromise<GetGalleryAggregateType<T>>

    /**
     * Group by Gallery.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {galleryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends galleryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: galleryGroupByArgs['orderBy'] }
        : { orderBy?: galleryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, galleryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGalleryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the gallery model
   */
  readonly fields: galleryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for gallery.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__galleryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the gallery model
   */ 
  interface galleryFieldRefs {
    readonly img_id: FieldRef<"gallery", 'Int'>
    readonly link: FieldRef<"gallery", 'String'>
  }
    

  // Custom InputTypes

  /**
   * gallery findUnique
   */
  export type galleryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * Filter, which gallery to fetch.
     */
    where: galleryWhereUniqueInput
  }


  /**
   * gallery findUniqueOrThrow
   */
  export type galleryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * Filter, which gallery to fetch.
     */
    where: galleryWhereUniqueInput
  }


  /**
   * gallery findFirst
   */
  export type galleryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * Filter, which gallery to fetch.
     */
    where?: galleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of galleries to fetch.
     */
    orderBy?: galleryOrderByWithRelationInput | galleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for galleries.
     */
    cursor?: galleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` galleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` galleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of galleries.
     */
    distinct?: GalleryScalarFieldEnum | GalleryScalarFieldEnum[]
  }


  /**
   * gallery findFirstOrThrow
   */
  export type galleryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * Filter, which gallery to fetch.
     */
    where?: galleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of galleries to fetch.
     */
    orderBy?: galleryOrderByWithRelationInput | galleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for galleries.
     */
    cursor?: galleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` galleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` galleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of galleries.
     */
    distinct?: GalleryScalarFieldEnum | GalleryScalarFieldEnum[]
  }


  /**
   * gallery findMany
   */
  export type galleryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * Filter, which galleries to fetch.
     */
    where?: galleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of galleries to fetch.
     */
    orderBy?: galleryOrderByWithRelationInput | galleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing galleries.
     */
    cursor?: galleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` galleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` galleries.
     */
    skip?: number
    distinct?: GalleryScalarFieldEnum | GalleryScalarFieldEnum[]
  }


  /**
   * gallery create
   */
  export type galleryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * The data needed to create a gallery.
     */
    data?: XOR<galleryCreateInput, galleryUncheckedCreateInput>
  }


  /**
   * gallery createMany
   */
  export type galleryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many galleries.
     */
    data: galleryCreateManyInput | galleryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * gallery update
   */
  export type galleryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * The data needed to update a gallery.
     */
    data: XOR<galleryUpdateInput, galleryUncheckedUpdateInput>
    /**
     * Choose, which gallery to update.
     */
    where: galleryWhereUniqueInput
  }


  /**
   * gallery updateMany
   */
  export type galleryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update galleries.
     */
    data: XOR<galleryUpdateManyMutationInput, galleryUncheckedUpdateManyInput>
    /**
     * Filter which galleries to update
     */
    where?: galleryWhereInput
  }


  /**
   * gallery upsert
   */
  export type galleryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * The filter to search for the gallery to update in case it exists.
     */
    where: galleryWhereUniqueInput
    /**
     * In case the gallery found by the `where` argument doesn't exist, create a new gallery with this data.
     */
    create: XOR<galleryCreateInput, galleryUncheckedCreateInput>
    /**
     * In case the gallery was found with the provided `where` argument, update it with this data.
     */
    update: XOR<galleryUpdateInput, galleryUncheckedUpdateInput>
  }


  /**
   * gallery delete
   */
  export type galleryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
    /**
     * Filter which gallery to delete.
     */
    where: galleryWhereUniqueInput
  }


  /**
   * gallery deleteMany
   */
  export type galleryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which galleries to delete
     */
    where?: galleryWhereInput
  }


  /**
   * gallery without action
   */
  export type galleryDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gallery
     */
    select?: gallerySelect<ExtArgs> | null
  }



  /**
   * Model highlight
   */

  export type AggregateHighlight = {
    _count: HighlightCountAggregateOutputType | null
    _avg: HighlightAvgAggregateOutputType | null
    _sum: HighlightSumAggregateOutputType | null
    _min: HighlightMinAggregateOutputType | null
    _max: HighlightMaxAggregateOutputType | null
  }

  export type HighlightAvgAggregateOutputType = {
    highlight_id: number | null
  }

  export type HighlightSumAggregateOutputType = {
    highlight_id: number | null
  }

  export type HighlightMinAggregateOutputType = {
    highlight_id: number | null
    LINK: string | null
  }

  export type HighlightMaxAggregateOutputType = {
    highlight_id: number | null
    LINK: string | null
  }

  export type HighlightCountAggregateOutputType = {
    highlight_id: number
    LINK: number
    _all: number
  }


  export type HighlightAvgAggregateInputType = {
    highlight_id?: true
  }

  export type HighlightSumAggregateInputType = {
    highlight_id?: true
  }

  export type HighlightMinAggregateInputType = {
    highlight_id?: true
    LINK?: true
  }

  export type HighlightMaxAggregateInputType = {
    highlight_id?: true
    LINK?: true
  }

  export type HighlightCountAggregateInputType = {
    highlight_id?: true
    LINK?: true
    _all?: true
  }

  export type HighlightAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which highlight to aggregate.
     */
    where?: highlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of highlights to fetch.
     */
    orderBy?: highlightOrderByWithRelationInput | highlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: highlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned highlights
    **/
    _count?: true | HighlightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HighlightAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HighlightSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HighlightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HighlightMaxAggregateInputType
  }

  export type GetHighlightAggregateType<T extends HighlightAggregateArgs> = {
        [P in keyof T & keyof AggregateHighlight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHighlight[P]>
      : GetScalarType<T[P], AggregateHighlight[P]>
  }




  export type highlightGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: highlightWhereInput
    orderBy?: highlightOrderByWithAggregationInput | highlightOrderByWithAggregationInput[]
    by: HighlightScalarFieldEnum[] | HighlightScalarFieldEnum
    having?: highlightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HighlightCountAggregateInputType | true
    _avg?: HighlightAvgAggregateInputType
    _sum?: HighlightSumAggregateInputType
    _min?: HighlightMinAggregateInputType
    _max?: HighlightMaxAggregateInputType
  }

  export type HighlightGroupByOutputType = {
    highlight_id: number
    LINK: string | null
    _count: HighlightCountAggregateOutputType | null
    _avg: HighlightAvgAggregateOutputType | null
    _sum: HighlightSumAggregateOutputType | null
    _min: HighlightMinAggregateOutputType | null
    _max: HighlightMaxAggregateOutputType | null
  }

  type GetHighlightGroupByPayload<T extends highlightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HighlightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HighlightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HighlightGroupByOutputType[P]>
            : GetScalarType<T[P], HighlightGroupByOutputType[P]>
        }
      >
    >


  export type highlightSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    highlight_id?: boolean
    LINK?: boolean
  }, ExtArgs["result"]["highlight"]>

  export type highlightSelectScalar = {
    highlight_id?: boolean
    LINK?: boolean
  }


  export type $highlightPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "highlight"
    objects: {}
    scalars: $Extensions.GetResult<{
      highlight_id: number
      LINK: string | null
    }, ExtArgs["result"]["highlight"]>
    composites: {}
  }


  type highlightGetPayload<S extends boolean | null | undefined | highlightDefaultArgs> = $Result.GetResult<Prisma.$highlightPayload, S>

  type highlightCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<highlightFindManyArgs, 'select' | 'include'> & {
      select?: HighlightCountAggregateInputType | true
    }

  export interface highlightDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['highlight'], meta: { name: 'highlight' } }
    /**
     * Find zero or one Highlight that matches the filter.
     * @param {highlightFindUniqueArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends highlightFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, highlightFindUniqueArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Highlight that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {highlightFindUniqueOrThrowArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends highlightFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, highlightFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Highlight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {highlightFindFirstArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends highlightFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, highlightFindFirstArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Highlight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {highlightFindFirstOrThrowArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends highlightFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, highlightFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Highlights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {highlightFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Highlights
     * const highlights = await prisma.highlight.findMany()
     * 
     * // Get first 10 Highlights
     * const highlights = await prisma.highlight.findMany({ take: 10 })
     * 
     * // Only select the `highlight_id`
     * const highlightWithHighlight_idOnly = await prisma.highlight.findMany({ select: { highlight_id: true } })
     * 
    **/
    findMany<T extends highlightFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, highlightFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Highlight.
     * @param {highlightCreateArgs} args - Arguments to create a Highlight.
     * @example
     * // Create one Highlight
     * const Highlight = await prisma.highlight.create({
     *   data: {
     *     // ... data to create a Highlight
     *   }
     * })
     * 
    **/
    create<T extends highlightCreateArgs<ExtArgs>>(
      args: SelectSubset<T, highlightCreateArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Highlights.
     *     @param {highlightCreateManyArgs} args - Arguments to create many Highlights.
     *     @example
     *     // Create many Highlights
     *     const highlight = await prisma.highlight.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends highlightCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, highlightCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Highlight.
     * @param {highlightDeleteArgs} args - Arguments to delete one Highlight.
     * @example
     * // Delete one Highlight
     * const Highlight = await prisma.highlight.delete({
     *   where: {
     *     // ... filter to delete one Highlight
     *   }
     * })
     * 
    **/
    delete<T extends highlightDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, highlightDeleteArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Highlight.
     * @param {highlightUpdateArgs} args - Arguments to update one Highlight.
     * @example
     * // Update one Highlight
     * const highlight = await prisma.highlight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends highlightUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, highlightUpdateArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Highlights.
     * @param {highlightDeleteManyArgs} args - Arguments to filter Highlights to delete.
     * @example
     * // Delete a few Highlights
     * const { count } = await prisma.highlight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends highlightDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, highlightDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Highlights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {highlightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Highlights
     * const highlight = await prisma.highlight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends highlightUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, highlightUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Highlight.
     * @param {highlightUpsertArgs} args - Arguments to update or create a Highlight.
     * @example
     * // Update or create a Highlight
     * const highlight = await prisma.highlight.upsert({
     *   create: {
     *     // ... data to create a Highlight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Highlight we want to update
     *   }
     * })
    **/
    upsert<T extends highlightUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, highlightUpsertArgs<ExtArgs>>
    ): Prisma__highlightClient<$Result.GetResult<Prisma.$highlightPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Highlights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {highlightCountArgs} args - Arguments to filter Highlights to count.
     * @example
     * // Count the number of Highlights
     * const count = await prisma.highlight.count({
     *   where: {
     *     // ... the filter for the Highlights we want to count
     *   }
     * })
    **/
    count<T extends highlightCountArgs>(
      args?: Subset<T, highlightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HighlightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Highlight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HighlightAggregateArgs>(args: Subset<T, HighlightAggregateArgs>): Prisma.PrismaPromise<GetHighlightAggregateType<T>>

    /**
     * Group by Highlight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {highlightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends highlightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: highlightGroupByArgs['orderBy'] }
        : { orderBy?: highlightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, highlightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHighlightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the highlight model
   */
  readonly fields: highlightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for highlight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__highlightClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the highlight model
   */ 
  interface highlightFieldRefs {
    readonly highlight_id: FieldRef<"highlight", 'Int'>
    readonly LINK: FieldRef<"highlight", 'String'>
  }
    

  // Custom InputTypes

  /**
   * highlight findUnique
   */
  export type highlightFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * Filter, which highlight to fetch.
     */
    where: highlightWhereUniqueInput
  }


  /**
   * highlight findUniqueOrThrow
   */
  export type highlightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * Filter, which highlight to fetch.
     */
    where: highlightWhereUniqueInput
  }


  /**
   * highlight findFirst
   */
  export type highlightFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * Filter, which highlight to fetch.
     */
    where?: highlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of highlights to fetch.
     */
    orderBy?: highlightOrderByWithRelationInput | highlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for highlights.
     */
    cursor?: highlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of highlights.
     */
    distinct?: HighlightScalarFieldEnum | HighlightScalarFieldEnum[]
  }


  /**
   * highlight findFirstOrThrow
   */
  export type highlightFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * Filter, which highlight to fetch.
     */
    where?: highlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of highlights to fetch.
     */
    orderBy?: highlightOrderByWithRelationInput | highlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for highlights.
     */
    cursor?: highlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of highlights.
     */
    distinct?: HighlightScalarFieldEnum | HighlightScalarFieldEnum[]
  }


  /**
   * highlight findMany
   */
  export type highlightFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * Filter, which highlights to fetch.
     */
    where?: highlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of highlights to fetch.
     */
    orderBy?: highlightOrderByWithRelationInput | highlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing highlights.
     */
    cursor?: highlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` highlights.
     */
    skip?: number
    distinct?: HighlightScalarFieldEnum | HighlightScalarFieldEnum[]
  }


  /**
   * highlight create
   */
  export type highlightCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * The data needed to create a highlight.
     */
    data?: XOR<highlightCreateInput, highlightUncheckedCreateInput>
  }


  /**
   * highlight createMany
   */
  export type highlightCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many highlights.
     */
    data: highlightCreateManyInput | highlightCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * highlight update
   */
  export type highlightUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * The data needed to update a highlight.
     */
    data: XOR<highlightUpdateInput, highlightUncheckedUpdateInput>
    /**
     * Choose, which highlight to update.
     */
    where: highlightWhereUniqueInput
  }


  /**
   * highlight updateMany
   */
  export type highlightUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update highlights.
     */
    data: XOR<highlightUpdateManyMutationInput, highlightUncheckedUpdateManyInput>
    /**
     * Filter which highlights to update
     */
    where?: highlightWhereInput
  }


  /**
   * highlight upsert
   */
  export type highlightUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * The filter to search for the highlight to update in case it exists.
     */
    where: highlightWhereUniqueInput
    /**
     * In case the highlight found by the `where` argument doesn't exist, create a new highlight with this data.
     */
    create: XOR<highlightCreateInput, highlightUncheckedCreateInput>
    /**
     * In case the highlight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<highlightUpdateInput, highlightUncheckedUpdateInput>
  }


  /**
   * highlight delete
   */
  export type highlightDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
    /**
     * Filter which highlight to delete.
     */
    where: highlightWhereUniqueInput
  }


  /**
   * highlight deleteMany
   */
  export type highlightDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which highlights to delete
     */
    where?: highlightWhereInput
  }


  /**
   * highlight without action
   */
  export type highlightDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the highlight
     */
    select?: highlightSelect<ExtArgs> | null
  }



  /**
   * Model showcase
   */

  export type AggregateShowcase = {
    _count: ShowcaseCountAggregateOutputType | null
    _avg: ShowcaseAvgAggregateOutputType | null
    _sum: ShowcaseSumAggregateOutputType | null
    _min: ShowcaseMinAggregateOutputType | null
    _max: ShowcaseMaxAggregateOutputType | null
  }

  export type ShowcaseAvgAggregateOutputType = {
    showcase_id: number | null
  }

  export type ShowcaseSumAggregateOutputType = {
    showcase_id: number | null
  }

  export type ShowcaseMinAggregateOutputType = {
    showcase_id: number | null
    link: string | null
  }

  export type ShowcaseMaxAggregateOutputType = {
    showcase_id: number | null
    link: string | null
  }

  export type ShowcaseCountAggregateOutputType = {
    showcase_id: number
    link: number
    _all: number
  }


  export type ShowcaseAvgAggregateInputType = {
    showcase_id?: true
  }

  export type ShowcaseSumAggregateInputType = {
    showcase_id?: true
  }

  export type ShowcaseMinAggregateInputType = {
    showcase_id?: true
    link?: true
  }

  export type ShowcaseMaxAggregateInputType = {
    showcase_id?: true
    link?: true
  }

  export type ShowcaseCountAggregateInputType = {
    showcase_id?: true
    link?: true
    _all?: true
  }

  export type ShowcaseAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which showcase to aggregate.
     */
    where?: showcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showcases to fetch.
     */
    orderBy?: showcaseOrderByWithRelationInput | showcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: showcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned showcases
    **/
    _count?: true | ShowcaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShowcaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShowcaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShowcaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShowcaseMaxAggregateInputType
  }

  export type GetShowcaseAggregateType<T extends ShowcaseAggregateArgs> = {
        [P in keyof T & keyof AggregateShowcase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShowcase[P]>
      : GetScalarType<T[P], AggregateShowcase[P]>
  }




  export type showcaseGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: showcaseWhereInput
    orderBy?: showcaseOrderByWithAggregationInput | showcaseOrderByWithAggregationInput[]
    by: ShowcaseScalarFieldEnum[] | ShowcaseScalarFieldEnum
    having?: showcaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShowcaseCountAggregateInputType | true
    _avg?: ShowcaseAvgAggregateInputType
    _sum?: ShowcaseSumAggregateInputType
    _min?: ShowcaseMinAggregateInputType
    _max?: ShowcaseMaxAggregateInputType
  }

  export type ShowcaseGroupByOutputType = {
    showcase_id: number
    link: string | null
    _count: ShowcaseCountAggregateOutputType | null
    _avg: ShowcaseAvgAggregateOutputType | null
    _sum: ShowcaseSumAggregateOutputType | null
    _min: ShowcaseMinAggregateOutputType | null
    _max: ShowcaseMaxAggregateOutputType | null
  }

  type GetShowcaseGroupByPayload<T extends showcaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShowcaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShowcaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShowcaseGroupByOutputType[P]>
            : GetScalarType<T[P], ShowcaseGroupByOutputType[P]>
        }
      >
    >


  export type showcaseSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    showcase_id?: boolean
    link?: boolean
  }, ExtArgs["result"]["showcase"]>

  export type showcaseSelectScalar = {
    showcase_id?: boolean
    link?: boolean
  }


  export type $showcasePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "showcase"
    objects: {}
    scalars: $Extensions.GetResult<{
      showcase_id: number
      link: string | null
    }, ExtArgs["result"]["showcase"]>
    composites: {}
  }


  type showcaseGetPayload<S extends boolean | null | undefined | showcaseDefaultArgs> = $Result.GetResult<Prisma.$showcasePayload, S>

  type showcaseCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<showcaseFindManyArgs, 'select' | 'include'> & {
      select?: ShowcaseCountAggregateInputType | true
    }

  export interface showcaseDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['showcase'], meta: { name: 'showcase' } }
    /**
     * Find zero or one Showcase that matches the filter.
     * @param {showcaseFindUniqueArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends showcaseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, showcaseFindUniqueArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Showcase that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {showcaseFindUniqueOrThrowArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends showcaseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, showcaseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Showcase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showcaseFindFirstArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends showcaseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, showcaseFindFirstArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Showcase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showcaseFindFirstOrThrowArgs} args - Arguments to find a Showcase
     * @example
     * // Get one Showcase
     * const showcase = await prisma.showcase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends showcaseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, showcaseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Showcases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showcaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Showcases
     * const showcases = await prisma.showcase.findMany()
     * 
     * // Get first 10 Showcases
     * const showcases = await prisma.showcase.findMany({ take: 10 })
     * 
     * // Only select the `showcase_id`
     * const showcaseWithShowcase_idOnly = await prisma.showcase.findMany({ select: { showcase_id: true } })
     * 
    **/
    findMany<T extends showcaseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, showcaseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Showcase.
     * @param {showcaseCreateArgs} args - Arguments to create a Showcase.
     * @example
     * // Create one Showcase
     * const Showcase = await prisma.showcase.create({
     *   data: {
     *     // ... data to create a Showcase
     *   }
     * })
     * 
    **/
    create<T extends showcaseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, showcaseCreateArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Showcases.
     *     @param {showcaseCreateManyArgs} args - Arguments to create many Showcases.
     *     @example
     *     // Create many Showcases
     *     const showcase = await prisma.showcase.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends showcaseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, showcaseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Showcase.
     * @param {showcaseDeleteArgs} args - Arguments to delete one Showcase.
     * @example
     * // Delete one Showcase
     * const Showcase = await prisma.showcase.delete({
     *   where: {
     *     // ... filter to delete one Showcase
     *   }
     * })
     * 
    **/
    delete<T extends showcaseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, showcaseDeleteArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Showcase.
     * @param {showcaseUpdateArgs} args - Arguments to update one Showcase.
     * @example
     * // Update one Showcase
     * const showcase = await prisma.showcase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends showcaseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, showcaseUpdateArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Showcases.
     * @param {showcaseDeleteManyArgs} args - Arguments to filter Showcases to delete.
     * @example
     * // Delete a few Showcases
     * const { count } = await prisma.showcase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends showcaseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, showcaseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Showcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showcaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Showcases
     * const showcase = await prisma.showcase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends showcaseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, showcaseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Showcase.
     * @param {showcaseUpsertArgs} args - Arguments to update or create a Showcase.
     * @example
     * // Update or create a Showcase
     * const showcase = await prisma.showcase.upsert({
     *   create: {
     *     // ... data to create a Showcase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Showcase we want to update
     *   }
     * })
    **/
    upsert<T extends showcaseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, showcaseUpsertArgs<ExtArgs>>
    ): Prisma__showcaseClient<$Result.GetResult<Prisma.$showcasePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Showcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showcaseCountArgs} args - Arguments to filter Showcases to count.
     * @example
     * // Count the number of Showcases
     * const count = await prisma.showcase.count({
     *   where: {
     *     // ... the filter for the Showcases we want to count
     *   }
     * })
    **/
    count<T extends showcaseCountArgs>(
      args?: Subset<T, showcaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShowcaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Showcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowcaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShowcaseAggregateArgs>(args: Subset<T, ShowcaseAggregateArgs>): Prisma.PrismaPromise<GetShowcaseAggregateType<T>>

    /**
     * Group by Showcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showcaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends showcaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: showcaseGroupByArgs['orderBy'] }
        : { orderBy?: showcaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, showcaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowcaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the showcase model
   */
  readonly fields: showcaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for showcase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__showcaseClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the showcase model
   */ 
  interface showcaseFieldRefs {
    readonly showcase_id: FieldRef<"showcase", 'Int'>
    readonly link: FieldRef<"showcase", 'String'>
  }
    

  // Custom InputTypes

  /**
   * showcase findUnique
   */
  export type showcaseFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * Filter, which showcase to fetch.
     */
    where: showcaseWhereUniqueInput
  }


  /**
   * showcase findUniqueOrThrow
   */
  export type showcaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * Filter, which showcase to fetch.
     */
    where: showcaseWhereUniqueInput
  }


  /**
   * showcase findFirst
   */
  export type showcaseFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * Filter, which showcase to fetch.
     */
    where?: showcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showcases to fetch.
     */
    orderBy?: showcaseOrderByWithRelationInput | showcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for showcases.
     */
    cursor?: showcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of showcases.
     */
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }


  /**
   * showcase findFirstOrThrow
   */
  export type showcaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * Filter, which showcase to fetch.
     */
    where?: showcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showcases to fetch.
     */
    orderBy?: showcaseOrderByWithRelationInput | showcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for showcases.
     */
    cursor?: showcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of showcases.
     */
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }


  /**
   * showcase findMany
   */
  export type showcaseFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * Filter, which showcases to fetch.
     */
    where?: showcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showcases to fetch.
     */
    orderBy?: showcaseOrderByWithRelationInput | showcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing showcases.
     */
    cursor?: showcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showcases.
     */
    skip?: number
    distinct?: ShowcaseScalarFieldEnum | ShowcaseScalarFieldEnum[]
  }


  /**
   * showcase create
   */
  export type showcaseCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * The data needed to create a showcase.
     */
    data?: XOR<showcaseCreateInput, showcaseUncheckedCreateInput>
  }


  /**
   * showcase createMany
   */
  export type showcaseCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many showcases.
     */
    data: showcaseCreateManyInput | showcaseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * showcase update
   */
  export type showcaseUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * The data needed to update a showcase.
     */
    data: XOR<showcaseUpdateInput, showcaseUncheckedUpdateInput>
    /**
     * Choose, which showcase to update.
     */
    where: showcaseWhereUniqueInput
  }


  /**
   * showcase updateMany
   */
  export type showcaseUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update showcases.
     */
    data: XOR<showcaseUpdateManyMutationInput, showcaseUncheckedUpdateManyInput>
    /**
     * Filter which showcases to update
     */
    where?: showcaseWhereInput
  }


  /**
   * showcase upsert
   */
  export type showcaseUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * The filter to search for the showcase to update in case it exists.
     */
    where: showcaseWhereUniqueInput
    /**
     * In case the showcase found by the `where` argument doesn't exist, create a new showcase with this data.
     */
    create: XOR<showcaseCreateInput, showcaseUncheckedCreateInput>
    /**
     * In case the showcase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<showcaseUpdateInput, showcaseUncheckedUpdateInput>
  }


  /**
   * showcase delete
   */
  export type showcaseDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
    /**
     * Filter which showcase to delete.
     */
    where: showcaseWhereUniqueInput
  }


  /**
   * showcase deleteMany
   */
  export type showcaseDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which showcases to delete
     */
    where?: showcaseWhereInput
  }


  /**
   * showcase without action
   */
  export type showcaseDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showcase
     */
    select?: showcaseSelect<ExtArgs> | null
  }



  /**
   * Model avatar
   */

  export type AggregateAvatar = {
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  export type AvatarAvgAggregateOutputType = {
    avatar_id: number | null
  }

  export type AvatarSumAggregateOutputType = {
    avatar_id: number | null
  }

  export type AvatarMinAggregateOutputType = {
    avatar_id: number | null
    LINK: string | null
  }

  export type AvatarMaxAggregateOutputType = {
    avatar_id: number | null
    LINK: string | null
  }

  export type AvatarCountAggregateOutputType = {
    avatar_id: number
    LINK: number
    _all: number
  }


  export type AvatarAvgAggregateInputType = {
    avatar_id?: true
  }

  export type AvatarSumAggregateInputType = {
    avatar_id?: true
  }

  export type AvatarMinAggregateInputType = {
    avatar_id?: true
    LINK?: true
  }

  export type AvatarMaxAggregateInputType = {
    avatar_id?: true
    LINK?: true
  }

  export type AvatarCountAggregateInputType = {
    avatar_id?: true
    LINK?: true
    _all?: true
  }

  export type AvatarAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which avatar to aggregate.
     */
    where?: avatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avatars to fetch.
     */
    orderBy?: avatarOrderByWithRelationInput | avatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: avatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned avatars
    **/
    _count?: true | AvatarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvatarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvatarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvatarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvatarMaxAggregateInputType
  }

  export type GetAvatarAggregateType<T extends AvatarAggregateArgs> = {
        [P in keyof T & keyof AggregateAvatar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvatar[P]>
      : GetScalarType<T[P], AggregateAvatar[P]>
  }




  export type avatarGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: avatarWhereInput
    orderBy?: avatarOrderByWithAggregationInput | avatarOrderByWithAggregationInput[]
    by: AvatarScalarFieldEnum[] | AvatarScalarFieldEnum
    having?: avatarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvatarCountAggregateInputType | true
    _avg?: AvatarAvgAggregateInputType
    _sum?: AvatarSumAggregateInputType
    _min?: AvatarMinAggregateInputType
    _max?: AvatarMaxAggregateInputType
  }

  export type AvatarGroupByOutputType = {
    avatar_id: number
    LINK: string | null
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  type GetAvatarGroupByPayload<T extends avatarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvatarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvatarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvatarGroupByOutputType[P]>
            : GetScalarType<T[P], AvatarGroupByOutputType[P]>
        }
      >
    >


  export type avatarSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    avatar_id?: boolean
    LINK?: boolean
  }, ExtArgs["result"]["avatar"]>

  export type avatarSelectScalar = {
    avatar_id?: boolean
    LINK?: boolean
  }


  export type $avatarPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "avatar"
    objects: {}
    scalars: $Extensions.GetResult<{
      avatar_id: number
      LINK: string | null
    }, ExtArgs["result"]["avatar"]>
    composites: {}
  }


  type avatarGetPayload<S extends boolean | null | undefined | avatarDefaultArgs> = $Result.GetResult<Prisma.$avatarPayload, S>

  type avatarCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<avatarFindManyArgs, 'select' | 'include'> & {
      select?: AvatarCountAggregateInputType | true
    }

  export interface avatarDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['avatar'], meta: { name: 'avatar' } }
    /**
     * Find zero or one Avatar that matches the filter.
     * @param {avatarFindUniqueArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends avatarFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, avatarFindUniqueArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Avatar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {avatarFindUniqueOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends avatarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, avatarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Avatar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avatarFindFirstArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends avatarFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, avatarFindFirstArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Avatar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avatarFindFirstOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends avatarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, avatarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Avatars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avatarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avatars
     * const avatars = await prisma.avatar.findMany()
     * 
     * // Get first 10 Avatars
     * const avatars = await prisma.avatar.findMany({ take: 10 })
     * 
     * // Only select the `avatar_id`
     * const avatarWithAvatar_idOnly = await prisma.avatar.findMany({ select: { avatar_id: true } })
     * 
    **/
    findMany<T extends avatarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, avatarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Avatar.
     * @param {avatarCreateArgs} args - Arguments to create a Avatar.
     * @example
     * // Create one Avatar
     * const Avatar = await prisma.avatar.create({
     *   data: {
     *     // ... data to create a Avatar
     *   }
     * })
     * 
    **/
    create<T extends avatarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, avatarCreateArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Avatars.
     *     @param {avatarCreateManyArgs} args - Arguments to create many Avatars.
     *     @example
     *     // Create many Avatars
     *     const avatar = await prisma.avatar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends avatarCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, avatarCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Avatar.
     * @param {avatarDeleteArgs} args - Arguments to delete one Avatar.
     * @example
     * // Delete one Avatar
     * const Avatar = await prisma.avatar.delete({
     *   where: {
     *     // ... filter to delete one Avatar
     *   }
     * })
     * 
    **/
    delete<T extends avatarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, avatarDeleteArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Avatar.
     * @param {avatarUpdateArgs} args - Arguments to update one Avatar.
     * @example
     * // Update one Avatar
     * const avatar = await prisma.avatar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends avatarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, avatarUpdateArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Avatars.
     * @param {avatarDeleteManyArgs} args - Arguments to filter Avatars to delete.
     * @example
     * // Delete a few Avatars
     * const { count } = await prisma.avatar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends avatarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, avatarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avatarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avatars
     * const avatar = await prisma.avatar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends avatarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, avatarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Avatar.
     * @param {avatarUpsertArgs} args - Arguments to update or create a Avatar.
     * @example
     * // Update or create a Avatar
     * const avatar = await prisma.avatar.upsert({
     *   create: {
     *     // ... data to create a Avatar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avatar we want to update
     *   }
     * })
    **/
    upsert<T extends avatarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, avatarUpsertArgs<ExtArgs>>
    ): Prisma__avatarClient<$Result.GetResult<Prisma.$avatarPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avatarCountArgs} args - Arguments to filter Avatars to count.
     * @example
     * // Count the number of Avatars
     * const count = await prisma.avatar.count({
     *   where: {
     *     // ... the filter for the Avatars we want to count
     *   }
     * })
    **/
    count<T extends avatarCountArgs>(
      args?: Subset<T, avatarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvatarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvatarAggregateArgs>(args: Subset<T, AvatarAggregateArgs>): Prisma.PrismaPromise<GetAvatarAggregateType<T>>

    /**
     * Group by Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avatarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends avatarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: avatarGroupByArgs['orderBy'] }
        : { orderBy?: avatarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, avatarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvatarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the avatar model
   */
  readonly fields: avatarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for avatar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__avatarClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the avatar model
   */ 
  interface avatarFieldRefs {
    readonly avatar_id: FieldRef<"avatar", 'Int'>
    readonly LINK: FieldRef<"avatar", 'String'>
  }
    

  // Custom InputTypes

  /**
   * avatar findUnique
   */
  export type avatarFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * Filter, which avatar to fetch.
     */
    where: avatarWhereUniqueInput
  }


  /**
   * avatar findUniqueOrThrow
   */
  export type avatarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * Filter, which avatar to fetch.
     */
    where: avatarWhereUniqueInput
  }


  /**
   * avatar findFirst
   */
  export type avatarFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * Filter, which avatar to fetch.
     */
    where?: avatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avatars to fetch.
     */
    orderBy?: avatarOrderByWithRelationInput | avatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for avatars.
     */
    cursor?: avatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }


  /**
   * avatar findFirstOrThrow
   */
  export type avatarFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * Filter, which avatar to fetch.
     */
    where?: avatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avatars to fetch.
     */
    orderBy?: avatarOrderByWithRelationInput | avatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for avatars.
     */
    cursor?: avatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }


  /**
   * avatar findMany
   */
  export type avatarFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * Filter, which avatars to fetch.
     */
    where?: avatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avatars to fetch.
     */
    orderBy?: avatarOrderByWithRelationInput | avatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing avatars.
     */
    cursor?: avatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avatars.
     */
    skip?: number
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }


  /**
   * avatar create
   */
  export type avatarCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * The data needed to create a avatar.
     */
    data?: XOR<avatarCreateInput, avatarUncheckedCreateInput>
  }


  /**
   * avatar createMany
   */
  export type avatarCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many avatars.
     */
    data: avatarCreateManyInput | avatarCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * avatar update
   */
  export type avatarUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * The data needed to update a avatar.
     */
    data: XOR<avatarUpdateInput, avatarUncheckedUpdateInput>
    /**
     * Choose, which avatar to update.
     */
    where: avatarWhereUniqueInput
  }


  /**
   * avatar updateMany
   */
  export type avatarUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update avatars.
     */
    data: XOR<avatarUpdateManyMutationInput, avatarUncheckedUpdateManyInput>
    /**
     * Filter which avatars to update
     */
    where?: avatarWhereInput
  }


  /**
   * avatar upsert
   */
  export type avatarUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * The filter to search for the avatar to update in case it exists.
     */
    where: avatarWhereUniqueInput
    /**
     * In case the avatar found by the `where` argument doesn't exist, create a new avatar with this data.
     */
    create: XOR<avatarCreateInput, avatarUncheckedCreateInput>
    /**
     * In case the avatar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<avatarUpdateInput, avatarUncheckedUpdateInput>
  }


  /**
   * avatar delete
   */
  export type avatarDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
    /**
     * Filter which avatar to delete.
     */
    where: avatarWhereUniqueInput
  }


  /**
   * avatar deleteMany
   */
  export type avatarDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which avatars to delete
     */
    where?: avatarWhereInput
  }


  /**
   * avatar without action
   */
  export type avatarDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avatar
     */
    select?: avatarSelect<ExtArgs> | null
  }



  /**
   * Model fading_img
   */

  export type AggregateFading_img = {
    _count: Fading_imgCountAggregateOutputType | null
    _avg: Fading_imgAvgAggregateOutputType | null
    _sum: Fading_imgSumAggregateOutputType | null
    _min: Fading_imgMinAggregateOutputType | null
    _max: Fading_imgMaxAggregateOutputType | null
  }

  export type Fading_imgAvgAggregateOutputType = {
    fading_id: number | null
  }

  export type Fading_imgSumAggregateOutputType = {
    fading_id: number | null
  }

  export type Fading_imgMinAggregateOutputType = {
    fading_id: number | null
    link: string | null
  }

  export type Fading_imgMaxAggregateOutputType = {
    fading_id: number | null
    link: string | null
  }

  export type Fading_imgCountAggregateOutputType = {
    fading_id: number
    link: number
    _all: number
  }


  export type Fading_imgAvgAggregateInputType = {
    fading_id?: true
  }

  export type Fading_imgSumAggregateInputType = {
    fading_id?: true
  }

  export type Fading_imgMinAggregateInputType = {
    fading_id?: true
    link?: true
  }

  export type Fading_imgMaxAggregateInputType = {
    fading_id?: true
    link?: true
  }

  export type Fading_imgCountAggregateInputType = {
    fading_id?: true
    link?: true
    _all?: true
  }

  export type Fading_imgAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which fading_img to aggregate.
     */
    where?: fading_imgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fading_imgs to fetch.
     */
    orderBy?: fading_imgOrderByWithRelationInput | fading_imgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fading_imgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fading_imgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fading_imgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fading_imgs
    **/
    _count?: true | Fading_imgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Fading_imgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Fading_imgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Fading_imgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Fading_imgMaxAggregateInputType
  }

  export type GetFading_imgAggregateType<T extends Fading_imgAggregateArgs> = {
        [P in keyof T & keyof AggregateFading_img]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFading_img[P]>
      : GetScalarType<T[P], AggregateFading_img[P]>
  }




  export type fading_imgGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: fading_imgWhereInput
    orderBy?: fading_imgOrderByWithAggregationInput | fading_imgOrderByWithAggregationInput[]
    by: Fading_imgScalarFieldEnum[] | Fading_imgScalarFieldEnum
    having?: fading_imgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Fading_imgCountAggregateInputType | true
    _avg?: Fading_imgAvgAggregateInputType
    _sum?: Fading_imgSumAggregateInputType
    _min?: Fading_imgMinAggregateInputType
    _max?: Fading_imgMaxAggregateInputType
  }

  export type Fading_imgGroupByOutputType = {
    fading_id: number
    link: string | null
    _count: Fading_imgCountAggregateOutputType | null
    _avg: Fading_imgAvgAggregateOutputType | null
    _sum: Fading_imgSumAggregateOutputType | null
    _min: Fading_imgMinAggregateOutputType | null
    _max: Fading_imgMaxAggregateOutputType | null
  }

  type GetFading_imgGroupByPayload<T extends fading_imgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Fading_imgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Fading_imgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Fading_imgGroupByOutputType[P]>
            : GetScalarType<T[P], Fading_imgGroupByOutputType[P]>
        }
      >
    >


  export type fading_imgSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fading_id?: boolean
    link?: boolean
  }, ExtArgs["result"]["fading_img"]>

  export type fading_imgSelectScalar = {
    fading_id?: boolean
    link?: boolean
  }


  export type $fading_imgPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "fading_img"
    objects: {}
    scalars: $Extensions.GetResult<{
      fading_id: number
      link: string | null
    }, ExtArgs["result"]["fading_img"]>
    composites: {}
  }


  type fading_imgGetPayload<S extends boolean | null | undefined | fading_imgDefaultArgs> = $Result.GetResult<Prisma.$fading_imgPayload, S>

  type fading_imgCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<fading_imgFindManyArgs, 'select' | 'include'> & {
      select?: Fading_imgCountAggregateInputType | true
    }

  export interface fading_imgDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fading_img'], meta: { name: 'fading_img' } }
    /**
     * Find zero or one Fading_img that matches the filter.
     * @param {fading_imgFindUniqueArgs} args - Arguments to find a Fading_img
     * @example
     * // Get one Fading_img
     * const fading_img = await prisma.fading_img.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends fading_imgFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, fading_imgFindUniqueArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Fading_img that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {fading_imgFindUniqueOrThrowArgs} args - Arguments to find a Fading_img
     * @example
     * // Get one Fading_img
     * const fading_img = await prisma.fading_img.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends fading_imgFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fading_imgFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Fading_img that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fading_imgFindFirstArgs} args - Arguments to find a Fading_img
     * @example
     * // Get one Fading_img
     * const fading_img = await prisma.fading_img.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends fading_imgFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, fading_imgFindFirstArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Fading_img that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fading_imgFindFirstOrThrowArgs} args - Arguments to find a Fading_img
     * @example
     * // Get one Fading_img
     * const fading_img = await prisma.fading_img.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends fading_imgFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fading_imgFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Fading_imgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fading_imgFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fading_imgs
     * const fading_imgs = await prisma.fading_img.findMany()
     * 
     * // Get first 10 Fading_imgs
     * const fading_imgs = await prisma.fading_img.findMany({ take: 10 })
     * 
     * // Only select the `fading_id`
     * const fading_imgWithFading_idOnly = await prisma.fading_img.findMany({ select: { fading_id: true } })
     * 
    **/
    findMany<T extends fading_imgFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fading_imgFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Fading_img.
     * @param {fading_imgCreateArgs} args - Arguments to create a Fading_img.
     * @example
     * // Create one Fading_img
     * const Fading_img = await prisma.fading_img.create({
     *   data: {
     *     // ... data to create a Fading_img
     *   }
     * })
     * 
    **/
    create<T extends fading_imgCreateArgs<ExtArgs>>(
      args: SelectSubset<T, fading_imgCreateArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Fading_imgs.
     *     @param {fading_imgCreateManyArgs} args - Arguments to create many Fading_imgs.
     *     @example
     *     // Create many Fading_imgs
     *     const fading_img = await prisma.fading_img.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends fading_imgCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fading_imgCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fading_img.
     * @param {fading_imgDeleteArgs} args - Arguments to delete one Fading_img.
     * @example
     * // Delete one Fading_img
     * const Fading_img = await prisma.fading_img.delete({
     *   where: {
     *     // ... filter to delete one Fading_img
     *   }
     * })
     * 
    **/
    delete<T extends fading_imgDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, fading_imgDeleteArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Fading_img.
     * @param {fading_imgUpdateArgs} args - Arguments to update one Fading_img.
     * @example
     * // Update one Fading_img
     * const fading_img = await prisma.fading_img.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends fading_imgUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, fading_imgUpdateArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Fading_imgs.
     * @param {fading_imgDeleteManyArgs} args - Arguments to filter Fading_imgs to delete.
     * @example
     * // Delete a few Fading_imgs
     * const { count } = await prisma.fading_img.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends fading_imgDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fading_imgDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fading_imgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fading_imgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fading_imgs
     * const fading_img = await prisma.fading_img.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends fading_imgUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, fading_imgUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fading_img.
     * @param {fading_imgUpsertArgs} args - Arguments to update or create a Fading_img.
     * @example
     * // Update or create a Fading_img
     * const fading_img = await prisma.fading_img.upsert({
     *   create: {
     *     // ... data to create a Fading_img
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fading_img we want to update
     *   }
     * })
    **/
    upsert<T extends fading_imgUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, fading_imgUpsertArgs<ExtArgs>>
    ): Prisma__fading_imgClient<$Result.GetResult<Prisma.$fading_imgPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Fading_imgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fading_imgCountArgs} args - Arguments to filter Fading_imgs to count.
     * @example
     * // Count the number of Fading_imgs
     * const count = await prisma.fading_img.count({
     *   where: {
     *     // ... the filter for the Fading_imgs we want to count
     *   }
     * })
    **/
    count<T extends fading_imgCountArgs>(
      args?: Subset<T, fading_imgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Fading_imgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fading_img.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fading_imgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Fading_imgAggregateArgs>(args: Subset<T, Fading_imgAggregateArgs>): Prisma.PrismaPromise<GetFading_imgAggregateType<T>>

    /**
     * Group by Fading_img.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fading_imgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends fading_imgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: fading_imgGroupByArgs['orderBy'] }
        : { orderBy?: fading_imgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, fading_imgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFading_imgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the fading_img model
   */
  readonly fields: fading_imgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for fading_img.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__fading_imgClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the fading_img model
   */ 
  interface fading_imgFieldRefs {
    readonly fading_id: FieldRef<"fading_img", 'Int'>
    readonly link: FieldRef<"fading_img", 'String'>
  }
    

  // Custom InputTypes

  /**
   * fading_img findUnique
   */
  export type fading_imgFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * Filter, which fading_img to fetch.
     */
    where: fading_imgWhereUniqueInput
  }


  /**
   * fading_img findUniqueOrThrow
   */
  export type fading_imgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * Filter, which fading_img to fetch.
     */
    where: fading_imgWhereUniqueInput
  }


  /**
   * fading_img findFirst
   */
  export type fading_imgFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * Filter, which fading_img to fetch.
     */
    where?: fading_imgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fading_imgs to fetch.
     */
    orderBy?: fading_imgOrderByWithRelationInput | fading_imgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fading_imgs.
     */
    cursor?: fading_imgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fading_imgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fading_imgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fading_imgs.
     */
    distinct?: Fading_imgScalarFieldEnum | Fading_imgScalarFieldEnum[]
  }


  /**
   * fading_img findFirstOrThrow
   */
  export type fading_imgFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * Filter, which fading_img to fetch.
     */
    where?: fading_imgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fading_imgs to fetch.
     */
    orderBy?: fading_imgOrderByWithRelationInput | fading_imgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fading_imgs.
     */
    cursor?: fading_imgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fading_imgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fading_imgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fading_imgs.
     */
    distinct?: Fading_imgScalarFieldEnum | Fading_imgScalarFieldEnum[]
  }


  /**
   * fading_img findMany
   */
  export type fading_imgFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * Filter, which fading_imgs to fetch.
     */
    where?: fading_imgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fading_imgs to fetch.
     */
    orderBy?: fading_imgOrderByWithRelationInput | fading_imgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fading_imgs.
     */
    cursor?: fading_imgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fading_imgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fading_imgs.
     */
    skip?: number
    distinct?: Fading_imgScalarFieldEnum | Fading_imgScalarFieldEnum[]
  }


  /**
   * fading_img create
   */
  export type fading_imgCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * The data needed to create a fading_img.
     */
    data?: XOR<fading_imgCreateInput, fading_imgUncheckedCreateInput>
  }


  /**
   * fading_img createMany
   */
  export type fading_imgCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many fading_imgs.
     */
    data: fading_imgCreateManyInput | fading_imgCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * fading_img update
   */
  export type fading_imgUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * The data needed to update a fading_img.
     */
    data: XOR<fading_imgUpdateInput, fading_imgUncheckedUpdateInput>
    /**
     * Choose, which fading_img to update.
     */
    where: fading_imgWhereUniqueInput
  }


  /**
   * fading_img updateMany
   */
  export type fading_imgUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update fading_imgs.
     */
    data: XOR<fading_imgUpdateManyMutationInput, fading_imgUncheckedUpdateManyInput>
    /**
     * Filter which fading_imgs to update
     */
    where?: fading_imgWhereInput
  }


  /**
   * fading_img upsert
   */
  export type fading_imgUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * The filter to search for the fading_img to update in case it exists.
     */
    where: fading_imgWhereUniqueInput
    /**
     * In case the fading_img found by the `where` argument doesn't exist, create a new fading_img with this data.
     */
    create: XOR<fading_imgCreateInput, fading_imgUncheckedCreateInput>
    /**
     * In case the fading_img was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fading_imgUpdateInput, fading_imgUncheckedUpdateInput>
  }


  /**
   * fading_img delete
   */
  export type fading_imgDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
    /**
     * Filter which fading_img to delete.
     */
    where: fading_imgWhereUniqueInput
  }


  /**
   * fading_img deleteMany
   */
  export type fading_imgDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which fading_imgs to delete
     */
    where?: fading_imgWhereInput
  }


  /**
   * fading_img without action
   */
  export type fading_imgDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fading_img
     */
    select?: fading_imgSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BannerScalarFieldEnum: {
    banner_id: 'banner_id',
    LINK: 'LINK'
  };

  export type BannerScalarFieldEnum = (typeof BannerScalarFieldEnum)[keyof typeof BannerScalarFieldEnum]


  export const GalleryScalarFieldEnum: {
    img_id: 'img_id',
    link: 'link'
  };

  export type GalleryScalarFieldEnum = (typeof GalleryScalarFieldEnum)[keyof typeof GalleryScalarFieldEnum]


  export const HighlightScalarFieldEnum: {
    highlight_id: 'highlight_id',
    LINK: 'LINK'
  };

  export type HighlightScalarFieldEnum = (typeof HighlightScalarFieldEnum)[keyof typeof HighlightScalarFieldEnum]


  export const ShowcaseScalarFieldEnum: {
    showcase_id: 'showcase_id',
    link: 'link'
  };

  export type ShowcaseScalarFieldEnum = (typeof ShowcaseScalarFieldEnum)[keyof typeof ShowcaseScalarFieldEnum]


  export const AvatarScalarFieldEnum: {
    avatar_id: 'avatar_id',
    LINK: 'LINK'
  };

  export type AvatarScalarFieldEnum = (typeof AvatarScalarFieldEnum)[keyof typeof AvatarScalarFieldEnum]


  export const Fading_imgScalarFieldEnum: {
    fading_id: 'fading_id',
    link: 'link'
  };

  export type Fading_imgScalarFieldEnum = (typeof Fading_imgScalarFieldEnum)[keyof typeof Fading_imgScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type bannerWhereInput = {
    AND?: bannerWhereInput | bannerWhereInput[]
    OR?: bannerWhereInput[]
    NOT?: bannerWhereInput | bannerWhereInput[]
    banner_id?: IntFilter<"banner"> | number
    LINK?: StringNullableFilter<"banner"> | string | null
  }

  export type bannerOrderByWithRelationInput = {
    banner_id?: SortOrder
    LINK?: SortOrderInput | SortOrder
  }

  export type bannerWhereUniqueInput = Prisma.AtLeast<{
    banner_id?: number
    AND?: bannerWhereInput | bannerWhereInput[]
    OR?: bannerWhereInput[]
    NOT?: bannerWhereInput | bannerWhereInput[]
    LINK?: StringNullableFilter<"banner"> | string | null
  }, "banner_id">

  export type bannerOrderByWithAggregationInput = {
    banner_id?: SortOrder
    LINK?: SortOrderInput | SortOrder
    _count?: bannerCountOrderByAggregateInput
    _avg?: bannerAvgOrderByAggregateInput
    _max?: bannerMaxOrderByAggregateInput
    _min?: bannerMinOrderByAggregateInput
    _sum?: bannerSumOrderByAggregateInput
  }

  export type bannerScalarWhereWithAggregatesInput = {
    AND?: bannerScalarWhereWithAggregatesInput | bannerScalarWhereWithAggregatesInput[]
    OR?: bannerScalarWhereWithAggregatesInput[]
    NOT?: bannerScalarWhereWithAggregatesInput | bannerScalarWhereWithAggregatesInput[]
    banner_id?: IntWithAggregatesFilter<"banner"> | number
    LINK?: StringNullableWithAggregatesFilter<"banner"> | string | null
  }

  export type galleryWhereInput = {
    AND?: galleryWhereInput | galleryWhereInput[]
    OR?: galleryWhereInput[]
    NOT?: galleryWhereInput | galleryWhereInput[]
    img_id?: IntFilter<"gallery"> | number
    link?: StringNullableFilter<"gallery"> | string | null
  }

  export type galleryOrderByWithRelationInput = {
    img_id?: SortOrder
    link?: SortOrderInput | SortOrder
  }

  export type galleryWhereUniqueInput = Prisma.AtLeast<{
    img_id?: number
    AND?: galleryWhereInput | galleryWhereInput[]
    OR?: galleryWhereInput[]
    NOT?: galleryWhereInput | galleryWhereInput[]
    link?: StringNullableFilter<"gallery"> | string | null
  }, "img_id">

  export type galleryOrderByWithAggregationInput = {
    img_id?: SortOrder
    link?: SortOrderInput | SortOrder
    _count?: galleryCountOrderByAggregateInput
    _avg?: galleryAvgOrderByAggregateInput
    _max?: galleryMaxOrderByAggregateInput
    _min?: galleryMinOrderByAggregateInput
    _sum?: gallerySumOrderByAggregateInput
  }

  export type galleryScalarWhereWithAggregatesInput = {
    AND?: galleryScalarWhereWithAggregatesInput | galleryScalarWhereWithAggregatesInput[]
    OR?: galleryScalarWhereWithAggregatesInput[]
    NOT?: galleryScalarWhereWithAggregatesInput | galleryScalarWhereWithAggregatesInput[]
    img_id?: IntWithAggregatesFilter<"gallery"> | number
    link?: StringNullableWithAggregatesFilter<"gallery"> | string | null
  }

  export type highlightWhereInput = {
    AND?: highlightWhereInput | highlightWhereInput[]
    OR?: highlightWhereInput[]
    NOT?: highlightWhereInput | highlightWhereInput[]
    highlight_id?: IntFilter<"highlight"> | number
    LINK?: StringNullableFilter<"highlight"> | string | null
  }

  export type highlightOrderByWithRelationInput = {
    highlight_id?: SortOrder
    LINK?: SortOrderInput | SortOrder
  }

  export type highlightWhereUniqueInput = Prisma.AtLeast<{
    highlight_id?: number
    AND?: highlightWhereInput | highlightWhereInput[]
    OR?: highlightWhereInput[]
    NOT?: highlightWhereInput | highlightWhereInput[]
    LINK?: StringNullableFilter<"highlight"> | string | null
  }, "highlight_id">

  export type highlightOrderByWithAggregationInput = {
    highlight_id?: SortOrder
    LINK?: SortOrderInput | SortOrder
    _count?: highlightCountOrderByAggregateInput
    _avg?: highlightAvgOrderByAggregateInput
    _max?: highlightMaxOrderByAggregateInput
    _min?: highlightMinOrderByAggregateInput
    _sum?: highlightSumOrderByAggregateInput
  }

  export type highlightScalarWhereWithAggregatesInput = {
    AND?: highlightScalarWhereWithAggregatesInput | highlightScalarWhereWithAggregatesInput[]
    OR?: highlightScalarWhereWithAggregatesInput[]
    NOT?: highlightScalarWhereWithAggregatesInput | highlightScalarWhereWithAggregatesInput[]
    highlight_id?: IntWithAggregatesFilter<"highlight"> | number
    LINK?: StringNullableWithAggregatesFilter<"highlight"> | string | null
  }

  export type showcaseWhereInput = {
    AND?: showcaseWhereInput | showcaseWhereInput[]
    OR?: showcaseWhereInput[]
    NOT?: showcaseWhereInput | showcaseWhereInput[]
    showcase_id?: IntFilter<"showcase"> | number
    link?: StringNullableFilter<"showcase"> | string | null
  }

  export type showcaseOrderByWithRelationInput = {
    showcase_id?: SortOrder
    link?: SortOrderInput | SortOrder
  }

  export type showcaseWhereUniqueInput = Prisma.AtLeast<{
    showcase_id?: number
    AND?: showcaseWhereInput | showcaseWhereInput[]
    OR?: showcaseWhereInput[]
    NOT?: showcaseWhereInput | showcaseWhereInput[]
    link?: StringNullableFilter<"showcase"> | string | null
  }, "showcase_id">

  export type showcaseOrderByWithAggregationInput = {
    showcase_id?: SortOrder
    link?: SortOrderInput | SortOrder
    _count?: showcaseCountOrderByAggregateInput
    _avg?: showcaseAvgOrderByAggregateInput
    _max?: showcaseMaxOrderByAggregateInput
    _min?: showcaseMinOrderByAggregateInput
    _sum?: showcaseSumOrderByAggregateInput
  }

  export type showcaseScalarWhereWithAggregatesInput = {
    AND?: showcaseScalarWhereWithAggregatesInput | showcaseScalarWhereWithAggregatesInput[]
    OR?: showcaseScalarWhereWithAggregatesInput[]
    NOT?: showcaseScalarWhereWithAggregatesInput | showcaseScalarWhereWithAggregatesInput[]
    showcase_id?: IntWithAggregatesFilter<"showcase"> | number
    link?: StringNullableWithAggregatesFilter<"showcase"> | string | null
  }

  export type avatarWhereInput = {
    AND?: avatarWhereInput | avatarWhereInput[]
    OR?: avatarWhereInput[]
    NOT?: avatarWhereInput | avatarWhereInput[]
    avatar_id?: IntFilter<"avatar"> | number
    LINK?: StringNullableFilter<"avatar"> | string | null
  }

  export type avatarOrderByWithRelationInput = {
    avatar_id?: SortOrder
    LINK?: SortOrderInput | SortOrder
  }

  export type avatarWhereUniqueInput = Prisma.AtLeast<{
    avatar_id?: number
    AND?: avatarWhereInput | avatarWhereInput[]
    OR?: avatarWhereInput[]
    NOT?: avatarWhereInput | avatarWhereInput[]
    LINK?: StringNullableFilter<"avatar"> | string | null
  }, "avatar_id">

  export type avatarOrderByWithAggregationInput = {
    avatar_id?: SortOrder
    LINK?: SortOrderInput | SortOrder
    _count?: avatarCountOrderByAggregateInput
    _avg?: avatarAvgOrderByAggregateInput
    _max?: avatarMaxOrderByAggregateInput
    _min?: avatarMinOrderByAggregateInput
    _sum?: avatarSumOrderByAggregateInput
  }

  export type avatarScalarWhereWithAggregatesInput = {
    AND?: avatarScalarWhereWithAggregatesInput | avatarScalarWhereWithAggregatesInput[]
    OR?: avatarScalarWhereWithAggregatesInput[]
    NOT?: avatarScalarWhereWithAggregatesInput | avatarScalarWhereWithAggregatesInput[]
    avatar_id?: IntWithAggregatesFilter<"avatar"> | number
    LINK?: StringNullableWithAggregatesFilter<"avatar"> | string | null
  }

  export type fading_imgWhereInput = {
    AND?: fading_imgWhereInput | fading_imgWhereInput[]
    OR?: fading_imgWhereInput[]
    NOT?: fading_imgWhereInput | fading_imgWhereInput[]
    fading_id?: IntFilter<"fading_img"> | number
    link?: StringNullableFilter<"fading_img"> | string | null
  }

  export type fading_imgOrderByWithRelationInput = {
    fading_id?: SortOrder
    link?: SortOrderInput | SortOrder
  }

  export type fading_imgWhereUniqueInput = Prisma.AtLeast<{
    fading_id?: number
    AND?: fading_imgWhereInput | fading_imgWhereInput[]
    OR?: fading_imgWhereInput[]
    NOT?: fading_imgWhereInput | fading_imgWhereInput[]
    link?: StringNullableFilter<"fading_img"> | string | null
  }, "fading_id">

  export type fading_imgOrderByWithAggregationInput = {
    fading_id?: SortOrder
    link?: SortOrderInput | SortOrder
    _count?: fading_imgCountOrderByAggregateInput
    _avg?: fading_imgAvgOrderByAggregateInput
    _max?: fading_imgMaxOrderByAggregateInput
    _min?: fading_imgMinOrderByAggregateInput
    _sum?: fading_imgSumOrderByAggregateInput
  }

  export type fading_imgScalarWhereWithAggregatesInput = {
    AND?: fading_imgScalarWhereWithAggregatesInput | fading_imgScalarWhereWithAggregatesInput[]
    OR?: fading_imgScalarWhereWithAggregatesInput[]
    NOT?: fading_imgScalarWhereWithAggregatesInput | fading_imgScalarWhereWithAggregatesInput[]
    fading_id?: IntWithAggregatesFilter<"fading_img"> | number
    link?: StringNullableWithAggregatesFilter<"fading_img"> | string | null
  }

  export type bannerCreateInput = {
    LINK?: string | null
  }

  export type bannerUncheckedCreateInput = {
    banner_id?: number
    LINK?: string | null
  }

  export type bannerUpdateInput = {
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bannerUncheckedUpdateInput = {
    banner_id?: IntFieldUpdateOperationsInput | number
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bannerCreateManyInput = {
    banner_id?: number
    LINK?: string | null
  }

  export type bannerUpdateManyMutationInput = {
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bannerUncheckedUpdateManyInput = {
    banner_id?: IntFieldUpdateOperationsInput | number
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type galleryCreateInput = {
    link?: string | null
  }

  export type galleryUncheckedCreateInput = {
    img_id?: number
    link?: string | null
  }

  export type galleryUpdateInput = {
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type galleryUncheckedUpdateInput = {
    img_id?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type galleryCreateManyInput = {
    img_id?: number
    link?: string | null
  }

  export type galleryUpdateManyMutationInput = {
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type galleryUncheckedUpdateManyInput = {
    img_id?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type highlightCreateInput = {
    LINK?: string | null
  }

  export type highlightUncheckedCreateInput = {
    highlight_id?: number
    LINK?: string | null
  }

  export type highlightUpdateInput = {
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type highlightUncheckedUpdateInput = {
    highlight_id?: IntFieldUpdateOperationsInput | number
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type highlightCreateManyInput = {
    highlight_id?: number
    LINK?: string | null
  }

  export type highlightUpdateManyMutationInput = {
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type highlightUncheckedUpdateManyInput = {
    highlight_id?: IntFieldUpdateOperationsInput | number
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type showcaseCreateInput = {
    link?: string | null
  }

  export type showcaseUncheckedCreateInput = {
    showcase_id?: number
    link?: string | null
  }

  export type showcaseUpdateInput = {
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type showcaseUncheckedUpdateInput = {
    showcase_id?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type showcaseCreateManyInput = {
    showcase_id?: number
    link?: string | null
  }

  export type showcaseUpdateManyMutationInput = {
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type showcaseUncheckedUpdateManyInput = {
    showcase_id?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avatarCreateInput = {
    LINK?: string | null
  }

  export type avatarUncheckedCreateInput = {
    avatar_id?: number
    LINK?: string | null
  }

  export type avatarUpdateInput = {
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avatarUncheckedUpdateInput = {
    avatar_id?: IntFieldUpdateOperationsInput | number
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avatarCreateManyInput = {
    avatar_id?: number
    LINK?: string | null
  }

  export type avatarUpdateManyMutationInput = {
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avatarUncheckedUpdateManyInput = {
    avatar_id?: IntFieldUpdateOperationsInput | number
    LINK?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type fading_imgCreateInput = {
    link?: string | null
  }

  export type fading_imgUncheckedCreateInput = {
    fading_id?: number
    link?: string | null
  }

  export type fading_imgUpdateInput = {
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type fading_imgUncheckedUpdateInput = {
    fading_id?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type fading_imgCreateManyInput = {
    fading_id?: number
    link?: string | null
  }

  export type fading_imgUpdateManyMutationInput = {
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type fading_imgUncheckedUpdateManyInput = {
    fading_id?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type bannerCountOrderByAggregateInput = {
    banner_id?: SortOrder
    LINK?: SortOrder
  }

  export type bannerAvgOrderByAggregateInput = {
    banner_id?: SortOrder
  }

  export type bannerMaxOrderByAggregateInput = {
    banner_id?: SortOrder
    LINK?: SortOrder
  }

  export type bannerMinOrderByAggregateInput = {
    banner_id?: SortOrder
    LINK?: SortOrder
  }

  export type bannerSumOrderByAggregateInput = {
    banner_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type galleryCountOrderByAggregateInput = {
    img_id?: SortOrder
    link?: SortOrder
  }

  export type galleryAvgOrderByAggregateInput = {
    img_id?: SortOrder
  }

  export type galleryMaxOrderByAggregateInput = {
    img_id?: SortOrder
    link?: SortOrder
  }

  export type galleryMinOrderByAggregateInput = {
    img_id?: SortOrder
    link?: SortOrder
  }

  export type gallerySumOrderByAggregateInput = {
    img_id?: SortOrder
  }

  export type highlightCountOrderByAggregateInput = {
    highlight_id?: SortOrder
    LINK?: SortOrder
  }

  export type highlightAvgOrderByAggregateInput = {
    highlight_id?: SortOrder
  }

  export type highlightMaxOrderByAggregateInput = {
    highlight_id?: SortOrder
    LINK?: SortOrder
  }

  export type highlightMinOrderByAggregateInput = {
    highlight_id?: SortOrder
    LINK?: SortOrder
  }

  export type highlightSumOrderByAggregateInput = {
    highlight_id?: SortOrder
  }

  export type showcaseCountOrderByAggregateInput = {
    showcase_id?: SortOrder
    link?: SortOrder
  }

  export type showcaseAvgOrderByAggregateInput = {
    showcase_id?: SortOrder
  }

  export type showcaseMaxOrderByAggregateInput = {
    showcase_id?: SortOrder
    link?: SortOrder
  }

  export type showcaseMinOrderByAggregateInput = {
    showcase_id?: SortOrder
    link?: SortOrder
  }

  export type showcaseSumOrderByAggregateInput = {
    showcase_id?: SortOrder
  }

  export type avatarCountOrderByAggregateInput = {
    avatar_id?: SortOrder
    LINK?: SortOrder
  }

  export type avatarAvgOrderByAggregateInput = {
    avatar_id?: SortOrder
  }

  export type avatarMaxOrderByAggregateInput = {
    avatar_id?: SortOrder
    LINK?: SortOrder
  }

  export type avatarMinOrderByAggregateInput = {
    avatar_id?: SortOrder
    LINK?: SortOrder
  }

  export type avatarSumOrderByAggregateInput = {
    avatar_id?: SortOrder
  }

  export type fading_imgCountOrderByAggregateInput = {
    fading_id?: SortOrder
    link?: SortOrder
  }

  export type fading_imgAvgOrderByAggregateInput = {
    fading_id?: SortOrder
  }

  export type fading_imgMaxOrderByAggregateInput = {
    fading_id?: SortOrder
    link?: SortOrder
  }

  export type fading_imgMinOrderByAggregateInput = {
    fading_id?: SortOrder
    link?: SortOrder
  }

  export type fading_imgSumOrderByAggregateInput = {
    fading_id?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use bannerDefaultArgs instead
     */
    export type bannerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = bannerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use galleryDefaultArgs instead
     */
    export type galleryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = galleryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use highlightDefaultArgs instead
     */
    export type highlightArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = highlightDefaultArgs<ExtArgs>
    /**
     * @deprecated Use showcaseDefaultArgs instead
     */
    export type showcaseArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = showcaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use avatarDefaultArgs instead
     */
    export type avatarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = avatarDefaultArgs<ExtArgs>
    /**
     * @deprecated Use fading_imgDefaultArgs instead
     */
    export type fading_imgArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = fading_imgDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}